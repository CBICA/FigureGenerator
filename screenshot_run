#!usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function, division
import argparse, datetime, sys
import ScreenshotMaker as sm
from ScreenshotMaker.screenshot_maker import ScreenShotMaker


if __name__ == "__main__":
    copyrightMessage = (
        "Contact: software@cbica.upenn.edu\n\n"
        + "This program is NOT FDA/CE approved and NOT intended for clinical use.\nCopyright (c) "
        + str(datetime.date.today().year)
        + " University of Pennsylvania. All rights reserved."
    )
    parser = argparse.ArgumentParser(
        prog="ScreenshotMaker",
        formatter_class=argparse.RawTextHelpFormatter,
        description="Constructing screenshots from medical images.\n\n"
        + copyrightMessage,
    )
    parser.add_argument(
        "-images",
        type=str,
        help="Input image files (comma-separated without any spaces in path and co-registered)",
        required=True,
    )
    parser.add_argument(
        "-masks",
        type=str,
        default=None,
        help="Mask files  (comma-separated without any spaces in path and co-registered with images); if multiple files are passed, first is ground truth",
        required=False,
    )
    parser.add_argument(
        "-mask_opacity",
        type=int,
        default=100,
        help="Mask opacity",
        required=False,
    )
    parser.add_argument(
        "-colormap",
        type=str,
        default="jet",
        help="The color map to use for alpha blending. All options in https://simpleitk.org/doxygen/latest/html/classitk_1_1simple_1_1ScalarToRGBColormapImageFilter.html#ad6f89e6e076652b4debdfbfd82234c6f",
        required=False,
    )
    parser.add_argument(
        "-output",
        type=str,
        help="Output directory to save intermediate files and model weights",
        required=True,
    )
    parser.add_argument(
        "-slice",
        type=str,
        default=None,
        help="Slice number to pick screenshots from; if not defined and mask present, slices with largest areas are used; if masks are absent, middle of each axis from image(s) is used",
        required=False,
    )
    parser.add_argument(
        "-borderpc",
        type=float,
        default=0.05,
        help="Percentage of size to use as border around bounding box (used only when mask is defined)",
        required=False,
    )
    parser.add_argument(
        "-axis_row",
        type=bool,
        default=True,
        help="Put all axes views in a single row, defaults to True",
        required=False,
    )
    parser.add_argument(
        "-bounded",
        type=bool,
        default=False,
        help="Construct bounding box around binarized ground truth",
        required=False,
    )

    parser.add_argument(
        "-v",
        "--version",
        action="version",
        version="%(prog)s v{}".format(sm.version) + "\n\n" + copyrightMessage,
        help="Show program's version number and exit.",
    )

    args = parser.parse_args()
    
    sm = ScreenShotMaker(args)
    sm.make_screenshot()

    print("Finished.")
